import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;


public class HashAttempt {

	public static void main(String[] args) throws NoSuchAlgorithmException {
		// TODO Auto-generated method stub
		MessageDigest md = MessageDigest.getInstance("SHA-256");
		byte[] x = "Cao Thi Khanh Ly".getBytes();
		//each letter is translated into a byte, a number, even space has
		//a byte of 32.
		
		byte y = 0b01010010;//1 byte = 8 bit up to 0 first digit b/c it represents
		//both positive and negative values
		for(byte b :x){
			System.out.print(b + " ");
			};
		md.update(x);
		md.digest();
		//System.out.println(md.digest().toString());
//char[] c = string.toCharArray();
//String.valueOf(char[])
		System.out.println();
		
		//array of bytes to hex
		
		for(byte b :x){
			System.out.print(Integer.toHexString((int)b));
		}
		System.out.println();
		
		System.out.println(bytesToHex(x));
		
	}
	
//https://gist.github.com/avilches/750151
	
	public static String bytesToHex(byte[] bytes) {
        StringBuffer result = new StringBuffer();
        for (byte byt : bytes) {result.append( Integer.toString((byt & 0xff) + 0x100, 16).substring(0) );
        System.out.println(result);};
        return result.toString();
    }
	
	/*0x100: 256
	 * The hex literal 0xFF is an equal int(255) = 
	 * 00000000 00000000 00000000 11111111
	 * It help to reduce lot of codes. It is occasionally used in RGB values which consist of 8bits.


	 * When you do a bitwise AND of 0xFF and any value from 0 to 255, the result is the exact same as the value. And if any value higher than 255 still the result will be within 0-255.

When you do a bitwise AND of 0xFF and any value from 0 to 255, the result is the exact same as the value. And if any value higher than 255 still the result will be within 0-255.


	 */

}
